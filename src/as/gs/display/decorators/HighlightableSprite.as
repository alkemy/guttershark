package gs.display.decorators {	import gs.util.DecoratorUtils;	import com.greensock.TweenMax;	import com.greensock.easing.Quad;	import flash.display.Sprite;	import flash.events.Event;	/**	 * The HighlightableSprite decorator provides you	 * with a simple way to create highlight (over)	 * and un-highlight (out) states for display objects.	 * 	 * <p><b>Examples</b> are in the guttershark repository.</p>	 */	final dynamic public class HighlightableSprite extends Decorator	{				/**		 * The default tween duration applied to all		 * tweens, if a custom one isn't given in the tween		 * options.		 */		public static var defaultTweenDuration:Number=.4;				/**		 * A default tween function applied to all		 * tweens, if a custom one isn't given in the tween		 * options (if the "ease" property isn't available)		 * in the tween options.		 */		public static var defaultEaseFunction:Function=Quad.easeOut;				/**		 * @private		 * Hit sprite reference.		 */		protected var hitSprite:Sprite;				/**		 * @private		 * Tween over/to options.		 */		protected var to:Object;				/**		 * @private		 * Tween out/to options.		 */		protected var out:Object;				/**		 * @private		 * The over event to react to.		 */		protected var overEvent:String;				/**		 * @private		 * The out event to react to.		 */		protected var outEvent:String;				/**		 * @private		 * Flag indicating locked state.		 */		protected var _locked:Boolean;				/**		 * Constructor for HighlightableSprite instances.		 * 		 * @param decorate A display object to decorate. 		 * @param hitSprite A sprite that mouse events are caught from, this can		 * be the same as the first parameter if no special hit sprite is needed.		 * @param highlightTweenOptions TweenMax options used for highlight.		 * @param unHighlightTweenOptions TweenMax options used for un-highlight.		 * @param proxyThrough An option object to delegate unknown methods or property calls to.		 * @param highlightEvent The event to react to, which triggers highlight state.		 * @param unhighlightEvent The event to react to, which triggers unhighlight state.		 */		public function HighlightableSprite(decorate:*,hitSprite:Sprite,highlightTweenOptions:Object,unHighlightTweenOptions:Object,proxyThrough:*=null,highlightEvent:String="mouseOver",unhighlightEvent:String="mouseOut")		{			super();			if(!decorate)throw new ArgumentError("Property {decorate} cannot be null");			if(!hitSprite)throw new ArgumentError("Property {hitSprite} cannot be null");			if(!unHighlightTweenOptions)throw new ArgumentError("Property {unHighlightTweenOptions} cannot be null");			if(!highlightTweenOptions)throw new ArgumentError("Property {highlightTweenOptions} cannot be null.");			methods=DecoratorUtils.buildMethods(["highlight","unhighlight","highlightAndLock","unlockAndUnhighlight","dispose"]);			props=DecoratorUtils.buildProps(["locked"]);			this.proxyThrough=proxyThrough;			this.sprite=decorate;			this.hitSprite=hitSprite;			this.to=highlightTweenOptions;			this.out=unHighlightTweenOptions;			this.overEvent=highlightEvent;			this.outEvent=unhighlightEvent;			hitSprite.addEventListener(highlightEvent,onHighlight);			hitSprite.addEventListener(unhighlightEvent,onUnhighlight);		}				/**		 * unhighlight event handler.		 */		private function onUnhighlight(e:Event):void		{			unhighlight();		}				/**		 * highlight event handler.		 */		private function onHighlight(e:Event):void		{			highlight();		}				/**		 * Trigger the highlight state of the decorated sprite.		 */		public function highlight():void		{			if(locked)return;			if(!to.duration&&!to.time)to.duration=defaultTweenDuration;			if(!to.ease)to.ease=defaultEaseFunction;			to.duration=(to.duration||to.time);			TweenMax.to(sprite,to.duration,to);		}				/**		 * Trigger the un-highlight state of the decorated sprite.		 */		public function unhighlight():void		{			if(locked)return;			if(!out.duration&&!out.time)out.duration=defaultTweenDuration;			if(!out.ease)out.ease=defaultEaseFunction;			out.duration=(out.duration||out.time);			TweenMax.to(sprite,out.duration,out);		}				/**		 * Whether or not the button is currently locked.		 */		public function set locked(val:Boolean):void		{			_locked=val;		}				/**		 * Whether or not the button is currently locked.		 */		public function get locked():Boolean		{			return _locked;		}				/**		 * Trigger the highlight state, and locks the state		 * so it can't be unhighlighted, until it's unlocked.		 */		public function highlightAndLock():void		{			highlight();			locked=true;		}				/**		 * Unlock the display state, and unhighlight		 * the decorated sprite.		 */		public function unlockAndUnhighlight():void		{			locked=false;			unhighlight();		}				/**		 * Dispose of this decorator.		 */		public function dispose():void		{			hitSprite.removeEventListener(overEvent,onHighlight);			hitSprite.removeEventListener(outEvent,onUnhighlight);			_locked=false;			to=null;			out=null;			sprite=null;			hitSprite=null;			proxyThrough=null;			methods=null;			props=null;		}	}}